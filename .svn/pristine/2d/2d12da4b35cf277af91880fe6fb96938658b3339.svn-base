package com.airgap.approfiling.service;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import com.airgap.approfiling.dao.MetadataImportJobSettingRepository;
import com.airgap.approfiling.model.MetadataImportJobSetting;
import com.airgap.common.security.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.airgap.approfiling.dao.MetadataImportPlanRepository;
import com.airgap.approfiling.feignClients.BackupServerFeignClient;
import com.airgap.approfiling.feignClients.ClientsImportFeignClient;
import com.airgap.approfiling.feignClients.UserFeignClient;
import com.airgap.approfiling.model.MetadataImportPlan;
import com.airgap.common.dto.MetadataImportJobSettingDto;
import com.airgap.common.dto.MetadataImportPlanDto;
import com.airgap.common.dto.TrainDto;
import com.airgap.common.encoding.Encoding;
import com.airgap.common.error.AbstractAirgapException;
import com.airgap.common.error.AbstractWarningException;
import com.airgap.common.error.DependentDataExistsException;

@Service
public class MetadataImportPlanServiceImpl implements IMetadataImportPlanService {

    @Autowired
    private MetadataImportPlanRepository repository;
    @Autowired
    MetadataImportJobSettingRepository metadataImportJobSettingRepository;

    @Autowired
    BackupServerFeignClient backupServerFeignClient;

    @Autowired
    private UserFeignClient userFeignClient;

    @Override
    public List<MetadataImportPlanDto> listAll() {
        List<MetadataImportPlanDto> dtos = null;
        try {
            Iterable<MetadataImportPlan> all = this.repository.findAll();
            if (null != all) {
                dtos = new ArrayList<>();
                for (MetadataImportPlan entity : all) {
                    MetadataImportPlanDto dto = entity.toDto();
                    // getSiteName
                    if (entity.getSite() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (!proceed)
                            throw new AbstractAirgapException("Can't get site name!");
                    }
                    // get backup server name
                    if (entity.getBackupServer() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (!proceed)
                            throw new AbstractAirgapException("Can't get backup server name!");
                    }
                    dtos.add(dto);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }

    public List<MetadataImportPlanDto> findAllServerIdsAndStatus() {
        try {
            List<MetadataImportJobSetting> all = metadataImportJobSettingRepository.findAll();
            if (all != null) {
                List<MetadataImportPlanDto> importPlanDtos = new ArrayList<>();
                MetadataImportPlanDto dto = new MetadataImportPlanDto();
                for (MetadataImportJobSetting entity : all) {
                    dto.setBackupServer(entity.getBackupServer());
                    dto.setStatus(entity.getStatus());
                    importPlanDtos.add(dto);
                }
                return importPlanDtos;
            }
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public Integer findMetadataImportPlanByServerId(Integer serverId) {
        try {
            Optional<MetadataImportJobSetting> metadataImportJobSetting = metadataImportJobSettingRepository.findByBackupServer(serverId);
            if(metadataImportJobSetting.isPresent()) {
                MetadataImportJobSetting exsitingMetadataImportJobSetting = metadataImportJobSetting.get();
                 return exsitingMetadataImportJobSetting.getStatus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Autowired
    private HttpSession httpSession;

    @Override
    public MetadataImportPlanDto save(MetadataImportPlanDto dto) {
        try {
            MetadataImportPlan entity = new MetadataImportPlan();
            if (dto.getId() != null) {

                // check if plan is running right now
                MetadataImportPlanDto byId = findById(dto.getId());
                if (null != byId) {
                    if (byId.getStatus().equals(1) || byId.getStatus().equals(7)) {
                        throw new AbstractAirgapException("Cannot edit this plan while it's running");
                    }
                }

                entity.setId(dto.getId());
                try {
                    entity.setModifiedBy(httpSession.getAttribute("user_name").toString());
                } catch (Exception e) {
                }
                entity.setCreatedBy(dto.getCreatedBy());
                entity.setModifiedOn(new Date(Calendar.getInstance().getTimeInMillis()));
                entity.setCreatedOn(dto.getCreatedOn());
            } else {
                try {
                    entity.setCreatedBy(httpSession.getAttribute("user_name").toString());
                } catch (Exception e) {
                }
                entity.setCreatedOn(new Date(Calendar.getInstance().getTimeInMillis()));
            }
            if (dto.getBackupServer() != null)
                entity.setBackupServer(dto.getBackupServer());
            if (dto.getCreatedBy() != null)
                entity.setCreatedBy(dto.getCreatedBy());
            if (dto.getCreatedOn() != null)
                entity.setCreatedOn(dto.getCreatedOn());
            if (dto.getImportLocation() != null)
                entity.setImportLocation(dto.getImportLocation());
            if (dto.getPassword() != null)
                entity.setPassword(Encoding.encode(dto.getPassword()));
            if (dto.getScheduleType() != null)
                entity.setScheduleType(dto.getScheduleType());
            if (dto.getSite() != null)
                entity.setSite(dto.getSite());
            if (dto.getStatus() != null)
                entity.setStatus(dto.getStatus());
            else
                entity.setStatus(3);
            if (dto.getActive() != null)
                entity.setActive(dto.getActive());
            else
                entity.setActive(1);
            if (dto.getUsername() != null)
                entity.setUsername(dto.getUsername());
            if (dto.getModifiedBy() != null)
                entity.setModifiedBy(dto.getModifiedBy());
            if (dto.getModifiedOn() != null)
                entity.setModifiedOn(dto.getModifiedOn());
            if (dto.getSentAt() != null)
                entity.setSentAt(dto.getSentAt());
            if (dto.getActive() != null)
                entity.setActive(dto.getActive());

//            if(dto.getAirgapWorkflow()!= null)
//                entity.setAirgapWorkflow(dto.getAirgapWorkflow());
            return repository.save(entity).toDto();
        } catch (Exception e) {
            e.printStackTrace();
            if (e.getMessage().contains("backup_server_UNIQUE")) {
                throw new AbstractAirgapException("Backup server is unique per plan!");
            } else if (e.getMessage().contains("[import_location_UNIQUE]"))
                throw new AbstractAirgapException("Path is unique per plan!");
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean delete(int id) {
        try {
            this.repository.deleteById(id);
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }

    @Override
    public MetadataImportPlanDto findById(Integer id) {
        MetadataImportPlan clientImportPlan = null;
        try {
            Optional<MetadataImportPlan> entity = this.repository.findById(id);
            clientImportPlan = entity.get();
            return clientImportPlan.toDto();
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean deleteAll(List<MetadataImportPlanDto> dtos) {
        StringBuilder deletedSwiteched = new StringBuilder("");
        StringBuilder noneDeletedSwitches = new StringBuilder("");
        boolean deleted = false;
        boolean noneDeleted = false;
        try {
            if (!dtos.isEmpty() && dtos != null) {
                for (MetadataImportPlanDto dto : dtos) {
                    if (dto.getStatus() == 1 || dto.getStatus() == 7) {
                        noneDeletedSwitches.append(dto.getServerName() + ", ");
                        noneDeleted = true;
                    } else {
                        deletedSwiteched.append(dto.getServerName() + ", ");
                        deleted = true;
                        repository.deleteById(dto.getId());
                    }
                }
            }
            String deletedNames = "";
            String noneDeletedNames = "";

            if (noneDeletedSwitches.length() > 2)
                noneDeletedNames = noneDeletedSwitches.substring(0, noneDeletedSwitches.length() - 2);
            if (deletedSwiteched.length() > 2)
                deletedNames = deletedSwiteched.substring(0, deletedSwiteched.length() - 2);
            if (noneDeleted && deleted) {
                throw new AbstractWarningException("Cannot delete running backup server(s) (" + noneDeletedNames + ") plans!"
                        + "backup server(s) (" + deletedNames + ") plan(s) deleted successfully!");
            }
            if (noneDeleted && !deleted) {
                throw new AbstractAirgapException("Cannot delete running backup server(s) (" + noneDeletedNames + ") plans!");
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public List<MetadataImportPlanDto> listAllByActive() {
        List<MetadataImportPlanDto> dtos = null;
        try {
            Iterable<MetadataImportPlan> all = this.repository.findAllByActive(1);
            if (null != all) {
                dtos = new ArrayList<>();
                for (MetadataImportPlan entity : all) {
                    MetadataImportPlanDto dto = entity.toDto();
                    if (entity.getSite() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (!proceed)
                            throw new AbstractAirgapException("Can't get site name!");
                    }
                    dtos.add(dto);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }

    @Autowired
    ClientsImportFeignClient clientsImportFeignClient;

    @Autowired
    JwtTokenUtil jwtTokenUtil;

    @Override
    public void run(MetadataImportJobSettingDto byId) {
        try {
            if (null != clientsImportFeignClient) {
                boolean proceed = false;
//                for(int i=0; i<3; i++){
                try {
                    byId.setDataScienceStrategy("CLASSIFY");
                    byId.setStatus(1);
                    if (byId.getBackupServer() != null) {
                        // getSiteName
                        if (byId.getSite() != null) {
                            try {
                                byId.setSiteName(backupServerFeignClient.findSiteById(byId.getSite()).getName());
                                proceed = true;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            if (!proceed)
                                throw new AbstractAirgapException("Can't get site name!");
                        }
                        proceed = false;
                        // get backup server name
                        if (byId.getBackupServer() != null) {
                            try {
                                byId.setServerName(backupServerFeignClient.findServerById(byId.getBackupServer()).getName());
                                proceed = true;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            if (!proceed)
                                throw new AbstractAirgapException("Can't get backup server name!");
                        }
                    }
                    updatePlanStatus(byId.getBackupServer(), 1);
                    TrainDto trainDto = new TrainDto();
                    trainDto.setServerId(byId.getBackupServer());
                    clientsImportFeignClient.importMetadata(trainDto,jwtTokenUtil.generateFakeToken());
                    proceed = true;
//                        break;
                } catch (Exception e) {
                    e.printStackTrace();
                }
//                }
                if (!proceed)
                    throw new AbstractAirgapException("Cannot call import metadata, from approfile to cimport");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean updatePlanStatus(Integer planId, Integer status) {
        try {
            this.repository.updateMetadataPlanStatus(planId, status);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public MetadataImportPlanDto findByServerId(Integer serverId) {
        MetadataImportPlan clientImportPlan = null;
        try {
            Optional<MetadataImportPlan> entity = this.repository.findByBackupServer(serverId);
            clientImportPlan = entity.get();
            return clientImportPlan.toDto();
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean activateOrDeactivate(List<MetadataImportPlanDto> dtos, Integer status) {
        try {
            List<String> wfNamesAlreadyActivated = null;
            List<String> wfNamesHasBeenActivated = null;
            List<String> wfNamesAlreadyDeactivated = null;
            List<String> wfNamesHasBeenDeActivated = null;
            List<String> wfNamesAlreadyRunning = null;
            boolean proceed = true;
            if (dtos != null && !dtos.isEmpty()) {
                wfNamesAlreadyActivated = new ArrayList<>();
                wfNamesHasBeenActivated = new ArrayList<>();
                wfNamesAlreadyDeactivated = new ArrayList<>();
                wfNamesHasBeenDeActivated = new ArrayList<>();
                wfNamesAlreadyRunning = new ArrayList<>();
                for (MetadataImportPlanDto dto : dtos) {
                    MetadataImportPlan wf = repository.findById(dto.getId()).get();
                    if (status == 1) {
                        if (wf.getActive() != null && wf.getActive() == 1) {
                            wfNamesAlreadyActivated.add(dto.getServerName());
                        } else {
                            wfNamesHasBeenActivated.add(dto.getServerName());
                            repository.activateOrDeactivate(wf.getId(), status);
                        }
                    } else {
                        if (wf.getStatus().equals(1) || wf.getStatus().equals(7)) {
                            wfNamesAlreadyRunning.add(dto.getServerName());
                        } else if (wf.getActive() != null && wf.getActive() == 0) {
                            wfNamesAlreadyDeactivated.add(dto.getServerName());
                        } else {
                            wfNamesHasBeenDeActivated.add(dto.getServerName());
                            repository.activateOrDeactivate(wf.getId(), status);
                        }
                    }
                    String nowStatus = "activated";
                    if (status == 0) nowStatus = "deactivated";


//                    try {
//                        /**
//                         * Log user logging as Audit entry
//                         */
//                        auditingService.logAudit(
//                                new AuditLogsDto(new Date(), MicroservicesNamesEnum.AirGap.toString(), "Project Workflow",
//                                        ( "activated".equalsIgnoreCase(nowStatus)?OperationEnum.ACTIVATED.toString():OperationEnum.DEACTIVATED.toString()), httpSession.getAttribute("user_name").toString(), "Workflow (" + wf.getName() + ") is " + nowStatus
//                                ));
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
                }
                /**
                 * End of auditing
                 */

            }


            if (status == 1) {
                if (!wfNamesAlreadyActivated.isEmpty() && wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyActivated + ") plan(s) already activated!");
                } else if (!wfNamesAlreadyActivated.isEmpty() && !wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenActivated) {
                        nameshasBeenActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    nameshasBeenActivated.substring(0, nameshasBeenActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyActivated + ") Plan(s) already activated, Backup Server(s) (" + nameshasBeenActivated + ") Plan(s) activated successfully!");
                }
            } else if (status == 0) {

                if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated!");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") plan(s) already deactivated!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") already deactivated, and backup server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated, Backup Server(s) (" + nameshasBeenDeActivated + ") Plan(s) deactivated successfully!");
                } else if (wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);

                    throw new AbstractWarningException("Cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                } else if (wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully, cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Override
    public boolean deleteByBackupServer(Integer serverId) {
        try {
            Optional<MetadataImportPlan> byBackupServer = repository.findByBackupServer(serverId);
            if (!byBackupServer.isEmpty()) {
                MetadataImportPlan clientImportPlan = byBackupServer.get();
                if (clientImportPlan != null) {
                    if (clientImportPlan.getStatus().equals(1) || clientImportPlan.getStatus().equals(7)) {
                        throw new DependentDataExistsException("Cannot delete backup server(s) in running import plan!");
                    }
                    repository.delete(clientImportPlan);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (e instanceof DependentDataExistsException) {
                throw e;
            }
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }


}
