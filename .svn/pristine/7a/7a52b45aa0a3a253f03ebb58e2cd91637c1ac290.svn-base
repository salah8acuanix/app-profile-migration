package com.airgap.approfiling.dao;
import com.airgap.approfiling.model.ClientImportPlan;
import com.airgap.approfiling.model.MetadataImportPlan;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;
import java.util.List;
import java.util.Optional;

@Repository
public interface ClientImportPlanRepository extends CrudRepository<ClientImportPlan,Integer> {
    Iterable<ClientImportPlan> findAllByActive(Integer active);

    @Transactional
    @Modifying
    @Query(value="update client_import_plan set status =:status where id =:id", nativeQuery = true)
    void updatePlanStatus(@Param("id") Integer id, @Param("status")Integer status);

    @Transactional
    @Modifying
    @Query(value="update client_import_plan set active = :status where id = :id", nativeQuery = true)
    void activateOrDeactivate(Integer id, Integer status);


    @Transactional
    @Modifying
    @Query(value="update client_import_plan set trained =:trainFlag where id =:id", nativeQuery = true)
    void updatePlanTrained(@Param("id") Integer id, @Param("trainFlag")Integer trainFlag);

    Optional<ClientImportPlan> findByBackupServer(Integer serverId);





    List<ClientImportPlan> findAllByScheduledTask(Integer sceduledTaskId);
    List<ClientImportPlan> findAllByWAndAirgapWorkflow(Integer workflowId);
}
