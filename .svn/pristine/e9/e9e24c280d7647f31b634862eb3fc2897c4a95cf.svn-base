package com.airgap.approfiling.service;


import com.airgap.approfiling.dao.MetadataImportJobSettingRepository;
import com.airgap.approfiling.feignClients.*;
import com.airgap.approfiling.model.MetadataImportJobSetting;
import com.airgap.common.dao.redis.model.UserSessionParamDto;
import com.airgap.common.dao.redis.repository.UserSessionRepo;
import com.airgap.common.dto.*;
import com.airgap.common.encoding.Encoding;
import com.airgap.common.error.AbstractAirgapException;
import com.airgap.common.error.AbstractWarningException;
import com.airgap.common.security.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpSession;
import java.util.*;

@Service
public class MetadataImportJobSettingServiceImpl implements IMetadataImportJobSettingService {

    @Autowired
    private MetadataImportJobSettingRepository repository;
    @Autowired
    private BackupServerFeignClient backupServerFeignClient;
    @Autowired
    private UserFeignClient userFeignClient;
    @Autowired
    private ClientsImportFeignClient clientsImportFeignClient;
    @Autowired
    private LoggingFeignClient loggingFeignClient;

    @Override
    public List<MetadataImportJobSettingDto> listAll() {
        List<MetadataImportJobSettingDto> dtos = null;
        try {
            List<MetadataImportJobSetting> all = repository.findAll(Sort.by(Sort.Direction.ASC, "createdOn"));
            if (null != all && !all.isEmpty()) {
                dtos = new ArrayList<>();
                for (MetadataImportJobSetting entity : all) {
                    MetadataImportJobSettingDto dto = entity.toDto();
                    // getSiteName
                    if (entity.getSite() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (!proceed) {
                            //                            throw new AbstractAirgapException("Can't get site name!");
                            dto.setSiteName(null);
                        }

                    }
                    // get backup server name
                    if (entity.getBackupServer() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        if (!proceed) {
                            dto.setServerName(null);
//                            throw new AbstractAirgapException("Can't get backup server name!");
                        }


                    }
                    dtos.add(dto);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }

    @Override
    public boolean deleteAll(List<MetadataImportJobSettingDto> dtos, String token) {
        StringBuilder deletedSwiteched = new StringBuilder("");
        StringBuilder noneDeletedSwitches = new StringBuilder("");
        boolean deleted = false;
        boolean noneDeleted = false;
        try {
            if (!dtos.isEmpty() && dtos != null) {
                for (MetadataImportJobSettingDto dto : dtos) {
                    if (!(dto.getStatus() == 3 || dto.getStatus() == 9 || dto.getStatus() == 11)) {
                        noneDeletedSwitches.append(dto.getServerName() + ", ");
                        dtos.remove(dto);
                        noneDeleted = true;
                    } else {
                        deletedSwiteched.append(dto.getServerName() + ", ");
                        deleted = true;
                        repository.deleteByBackupServer(dto.getBackupServer());
                    }
                }
                loggingFeignClient.deleteAllJobLogs(dtos);
            }
            String deletedNames = "";
            String noneDeletedNames = "";

            if (noneDeletedSwitches.length() > 2)
                noneDeletedNames = noneDeletedSwitches.substring(0, noneDeletedSwitches.length() - 2);
            if (deletedSwiteched.length() > 2)
                deletedNames = deletedSwiteched.substring(0, deletedSwiteched.length() - 2);
            if (noneDeleted && deleted) {
                throw new AbstractWarningException("Cannot delete running backup server(s) (" + noneDeletedNames + ") import job!"
                        + "backup server(s) (" + deletedNames + ") import job(s) deleted successfully!");
            }
            if (noneDeleted && !deleted) {
                throw new AbstractAirgapException("Cannot delete running backup server(s) (" + noneDeletedNames + ") import job!");
            }


            try {
                /**
                 * Log user logging as Audit entry
                 */
                auditingService.logAudit(
                        new AuditLogsDto(new Date(), MicroservicesNamesEnum.ANOMALY_DETECTION.toString(), "Configurations - Anomaly Detection",
                                OperationEnum.DELETE.toString(),
                                getLoggedUser(token), "Metadata Import Job Settings: Backup Server(s) (" + deletedNames + ") import job(s) is/are deleted"
                        ));
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public List<MetadataImportJobSettingDto> listAllByActive() {
        List<MetadataImportJobSettingDto> dtos = null;
        try {
            Iterable<MetadataImportJobSetting> all = this.repository.findAllByActive(1);
            if (null != all) {
                dtos = new ArrayList<>();
                for (MetadataImportJobSetting entity : all) {
                    MetadataImportJobSettingDto dto = entity.toDto();
                    if (entity.getSite() != null) {
                        boolean proceed = false;
                        for (int i = 0; i < 10; i++) {
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (!proceed)
                            throw new AbstractAirgapException("Can't get site name!");
                    }
                    dtos.add(dto);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }


    @Override
    public void run(MetadataImportJobSettingDto byId) {
        try {
            if (byId.getSite() != null) {
                boolean proceed = false;
                for (int i = 0; i < 10; i++) {
                    try {
                        byId.setSiteName(backupServerFeignClient.findSiteById(byId.getSite()).getName());
                        proceed = true;
                        break;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (!proceed)
                    throw new AbstractAirgapException("Can't get site name!");
            }
            // get backup server name
            if (byId.getBackupServer() != null) {
                boolean proceed = false;
                for (int i = 0; i < 10; i++) {
                    try {
                        byId.setServerName(backupServerFeignClient.findServerById(byId.getBackupServer()).getName());
                        proceed = true;
                        break;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (!proceed)
                    throw new AbstractAirgapException("Can't get backup server name!");
            }
            if (null != clientsImportFeignClient) {
                byId.setDataScienceStrategy("CLASSIFY");
                byId.setStatus(1);
                byId.setImportMetadata(true);
                TrainDto trainDto = new TrainDto();
                trainDto.setServerId(byId.getBackupServer());
                String fakeToken = jwtTokenUtil.generateFakeToken();
                clientsImportFeignClient.importMetadata(trainDto,fakeToken);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Autowired
    private JwtTokenUtil jwtTokenUtil;
    @Override
    public boolean updateMetadataImportJobStatus(Integer planId, Integer status) {
        try {
            this.repository.updatePlanStatus(planId, status);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public MetadataImportJobSettingDto findMetadataImportJobByServerId(Integer serverId) {
        MetadataImportJobSetting clientImportPlan = null;
        MetadataImportJobSettingDto metadataImportJobSettingDto = null;
        try {
            Optional<MetadataImportJobSetting> entity = this.repository.findByBackupServer(serverId);
            if (!entity.isEmpty()) {
                clientImportPlan = entity.get();
                if (clientImportPlan != null)
                    metadataImportJobSettingDto = clientImportPlan.toDto();
            }
            BackupServerDto serverById = backupServerFeignClient.findServerById(serverId);
            if (null != serverById) {
                metadataImportJobSettingDto.setServerName(serverById.getName());
                metadataImportJobSettingDto.setBackupServer(serverId);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return metadataImportJobSettingDto;
    }

    @Override
    public boolean activateOrDeactivate(List<MetadataImportJobSettingDto> dtos, Integer status, String token) {
        try {
            List<String> wfNamesAlreadyActivated = null;
            List<String> wfNamesHasBeenActivated = null;
            List<String> wfNamesAlreadyDeactivated = null;
            List<String> wfNamesHasBeenDeActivated = null;
            List<String> wfNamesAlreadyRunning = null;
            boolean proceed = true;
            if (dtos != null && !dtos.isEmpty()) {
                wfNamesAlreadyActivated = new ArrayList<>();
                wfNamesHasBeenActivated = new ArrayList<>();
                wfNamesAlreadyDeactivated = new ArrayList<>();
                wfNamesHasBeenDeActivated = new ArrayList<>();
                wfNamesAlreadyRunning = new ArrayList<>();
                for (MetadataImportJobSettingDto dto : dtos) {
                    Optional<MetadataImportJobSetting> byBackupServer = repository.findByBackupServer(dto.getBackupServer());
                    if (!byBackupServer.isEmpty()) {
                        MetadataImportJobSetting wf = byBackupServer.get();
                        if (status == 1) {
                            if (wf.getActive() != null && wf.getActive() == 1) {
                                wfNamesAlreadyActivated.add(dto.getServerName());
                            } else {
                                wfNamesHasBeenActivated.add(dto.getServerName());
                                repository.activateOrDeactivate(wf.getBackupServer(), status);
                            }
                        } else {
                            if (wf.getStatus().equals(1) || wf.getStatus().equals(7) || dto.getStatus() == 2 || dto.getStatus() == 5 || dto.getStatus() == 8) {
                                wfNamesAlreadyRunning.add(dto.getServerName());
                            } else if (wf.getActive() != null && wf.getActive() == 0) {
                                wfNamesAlreadyDeactivated.add(dto.getServerName());
                            } else {
                                wfNamesHasBeenDeActivated.add(dto.getServerName());
                                repository.activateOrDeactivate(wf.getBackupServer(), status);
                            }
                        }
                    }

                    String nowStatus = "activated";
                    if (status == 0) nowStatus = "deactivated";

                    String serverName = "";
                    BackupServerDto serverById = backupServerFeignClient.findServerById(dto.getBackupServer());
                    if (null != serverById) {
                        serverName = serverById.getName();
                    }

                    try {
                        /**
                         * Log user logging as Audit entry
                         */
                        auditingService.logAudit(
                                new AuditLogsDto(new Date(), MicroservicesNamesEnum.ANOMALY_DETECTION.toString(), "Configurations - Anomaly Detection",
                                        ("activated".equalsIgnoreCase(nowStatus) ? OperationEnum.ACTIVATED.toString() : OperationEnum.DEACTIVATED.toString()),
                                        getLoggedUser(token), "Metadata Import Job Settings: Backup Server (" + serverName + ") import job " + nowStatus
                                ));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                /**
                 * End of auditing
                 */

            }


            if (status == 1) {
                if (!wfNamesAlreadyActivated.isEmpty() && wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyActivated + ") plan(s) already activated!");
                } else if (!wfNamesAlreadyActivated.isEmpty() && !wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenActivated) {
                        nameshasBeenActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    nameshasBeenActivated.substring(0, nameshasBeenActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyActivated + ") Plan(s) already activated, Backup Server(s) (" + nameshasBeenActivated + ") Plan(s) activated successfully!");
                }
            } else if (status == 0) {

                if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated!");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") plan(s) already deactivated!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") already deactivated, and backup server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated, Backup Server(s) (" + nameshasBeenDeActivated + ") Plan(s) deactivated successfully!");
                } else if (wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);

                    throw new AbstractWarningException("Cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                } else if (wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully, cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Override
    public boolean deleteByBackupServer(Integer serverId) {
        try {
            Optional<MetadataImportJobSetting> byBackupServer = repository.findByBackupServer(serverId);
            if (!byBackupServer.isEmpty()) {
                MetadataImportJobSetting clientImportPlan = byBackupServer.get();
                if (clientImportPlan != null) {
                    if (clientImportPlan.getStatus().equals(1) || clientImportPlan.getStatus().equals(7)
                            || clientImportPlan.getStatus().equals(2) || clientImportPlan.getStatus().equals(5)
                            || clientImportPlan.getStatus().equals(8)) {
                        throw new AbstractAirgapException("Cannot delete the backup server because it's running in an import plan!");
                    }
                    repository.delete(clientImportPlan);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }

    @Override
    public List<MetadataImportJobSettingDto> metadataImportJobByScheduledTaskAndScheduledTaskEnabled(Integer sceduledTaskId) {
        List<MetadataImportJobSettingDto> clientImportPlans = null;
        try {
            List<MetadataImportJobSetting> all = this.repository.findAllByScheduledTask(sceduledTaskId);
            if (null != all && !all.isEmpty()) {
                clientImportPlans = new ArrayList<>();
                for (MetadataImportJobSetting clientImportPlan : all) {
                    if (clientImportPlan.getScheduleType().equals(2)) { // 2 means after scheduled task
                        clientImportPlans.add(clientImportPlan.toDto());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return clientImportPlans;
    }

    @Override
    public boolean updateMetadataImportJobTrainStatus(Integer planId, Integer trained) {
        try {
            this.repository.updatePlanTrained(planId, trained);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }


    @Autowired
    private HttpSession httpSession;

    @Autowired
    private AuditingFeignClient auditingService;

    @Autowired
    UserSessionRepo userSessionRepo;

    public String getLoggedUser(String token) {
        try {
            Optional<UserSessionParamDto> userSessionRepoById = userSessionRepo.findById(token);
            if (userSessionRepoById.isPresent())
                return userSessionRepoById.get().getName();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    @Override
    public MetadataImportJobSettingDto save(MetadataImportJobSettingDto dto, String token) {
        try {
            MetadataImportJobSetting entity = new MetadataImportJobSetting();
            if (dto.getBackupServer() != null) {

                // check if plan is running right now
                MetadataImportJobSettingDto byId = findByBackupServer(dto.getBackupServer());
                if (null != byId) {
                    if (byId.getStatus().equals(1) || byId.getStatus().equals(7) ||
                            byId.getStatus().equals(2) || byId.getStatus().equals(5) ||
                            byId.getStatus().equals(8)) {
                        throw new AbstractAirgapException("Cannot edit this plan while it's running");
                    }
                }
                if (dto.getNewRrcord().equals(1)) {
                    if (byId != null)
                        throw new AbstractAirgapException("Cannot add new import plan, this server has one!");
                }
                entity.setBackupServer(dto.getBackupServer());
            }
            // Auditing
            String loggedInUser = "";
            try {
//                loggedInUser = httpSession.getAttribute("user_name").toString();
                loggedInUser = getLoggedUser(token);
            } catch (Exception e) {
                e.printStackTrace();
            }
//            set createdBy
            if (dto.getCreatedOn() == null) {
                entity.setCreatedBy(loggedInUser);
                entity.setCreatedOn(new Date());
            }
//            set modifiedBy
            else {
                entity.setModifiedBy(loggedInUser);
                entity.setModifiedOn(new Date());
                entity.setCreatedBy(dto.getCreatedBy());
                entity.setCreatedOn(dto.getCreatedOn());
            }
            if (dto.getImportLocation() != null)
                entity.setImportLocation(dto.getImportLocation());
            if (dto.getPassword() != null)
                entity.setPassword(Encoding.encode(dto.getPassword()));
            if (dto.getScheduleType() != null)
                entity.setScheduleType(dto.getScheduleType());
            if (dto.getSite() != null)
                entity.setSite(dto.getSite());
            if (dto.getStatus() != null)
                entity.setStatus(dto.getStatus());
            else
                entity.setStatus(3);
            if (dto.getActive() != null)
                entity.setStatus(dto.getStatus());
            else
                entity.setActive(1);
            if (dto.getUsername() != null)
                entity.setUsername(dto.getUsername());
            if (dto.getSentAt() != null)
                entity.setSentAt(dto.getSentAt());
            if (dto.getActive() != null)
                entity.setActive(dto.getActive());
            if (dto.getScheduledTask() != null)
                entity.setScheduledTask(dto.getScheduledTask());
            if (dto.getRunDay() != null)
                entity.setRunDay(dto.getRunDay());
            if (dto.getRuntime() != null)
                entity.setRuntime(dto.getRuntime());
            if (dto.getPort() != null)
                entity.setPort(dto.getPort());
            if (dto.getImportMetadata() != null) {
                if (dto.getImportMetadata())
                    entity.setImportMetadata(1);
                else
                    entity.setImportMetadata(0);
            } else
                entity.setImportMetadata(0);
            if (dto.getTrained() != null) {
                if (dto.getTrained())
                    entity.setTrained(1);
                else
                    entity.setTrained(0);
            } else {
                entity.setTrained(0);
            }
//            if(dto.getRemote()!= null){
//                entity.setRemote(dto.getRemote());
//            }
            if (dto.getAirgapWorkflow() != null)
                entity.setAirgapWorkflow(dto.getAirgapWorkflow());
            MetadataImportJobSettingDto byBackupServer = findByBackupServer(dto.getBackupServer());
            boolean alreadyExist = false;
            if (null != byBackupServer) {
                alreadyExist = true;
            }
            MetadataImportJobSetting save = repository.save(entity);
            BackupServerDto serverById = backupServerFeignClient.findServerById(dto.getBackupServer());
            String serverName = "";
            if (null != serverById) {
                serverName = serverById.getName();
            }

            // start audit log
            try {
                /**
                 * Log user logging as Audit entry
                 */
                auditingService.logAudit(
                        new AuditLogsDto(new Date(), MicroservicesNamesEnum.ANOMALY_DETECTION.toString(), "Configurations - Anomaly Detection",
                                alreadyExist ? OperationEnum.UPDATE.toString() : OperationEnum.ADD.toString(),
                                getLoggedUser(token), "Metadata Import: Backup Server (" + serverName + ")'s job saved"
                        ));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            // end audit log

            return save.toDto();
        } catch (Exception e) {
            e.printStackTrace();
            if (e.getMessage().contains("backup_server_UNIQUE")) {
                throw new AbstractAirgapException("Backup server is unique per plan!");
            } else if (e.getMessage().contains("[import_location_UNIQUE]"))
                throw new AbstractAirgapException("Path is unique per plan!");
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean delete(int id) {
        try {
            this.repository.deleteById(id);
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }

    @Override
    public MetadataImportJobSettingDto findByBackupServer(Integer backupServer) {
        MetadataImportJobSetting clientImportPlan = null;
        try {
            Optional<MetadataImportJobSetting> entity = this.repository.findByBackupServer(backupServer);
            if (!entity.isEmpty()) {
                clientImportPlan = entity.get();
               return clientImportPlan.toDto();
            }
//            // if the server has policies
//            try {
//                boolean hasPolicy = clientsImportFeignClient.findDiscoveredPolicyByServerCount(backupServer);
//                metadataImportJobSettingDto.setHasPolicy(hasPolicy);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//            return metadataImportJobSettingDto;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return null;
    }

    @Override
    public MetadataImportJobSettingDto findBackupServerAndServerPoliciesById(Integer backupServer) {
        MetadataImportJobSettingDto metadataImportJobSettingDto = null;
        try {
            boolean hasPolicy = false;
            metadataImportJobSettingDto = new MetadataImportJobSettingDto();
            // if the server has policies
            hasPolicy = clientsImportFeignClient.findDiscoveredPolicyByServerCount(backupServer);
            metadataImportJobSettingDto.setHasPolicy(hasPolicy);
            return metadataImportJobSettingDto;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return metadataImportJobSettingDto;
    }


}
