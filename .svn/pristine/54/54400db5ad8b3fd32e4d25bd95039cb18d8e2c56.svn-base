package com.airgap.approfiling.service;

import com.airgap.approfiling.dao.ClientImportPlanRepository;
import com.airgap.approfiling.feignClients.BackupServerFeignClient;
import com.airgap.approfiling.feignClients.ClientsImportFeignClient;
import com.airgap.approfiling.feignClients.UserFeignClient;
import com.airgap.approfiling.model.ClientImportPlan;
import com.airgap.approfiling.model.MetadataImportPlan;
import com.airgap.common.dto.ClientImportPlanDto;
import com.airgap.common.encoding.Encoding;
import com.airgap.common.error.AbstractAirgapException;
import com.airgap.common.error.AbstractWarningException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpSession;
import java.util.*;

@Service
public class ClientImportServiceImpl implements IClientImportPlanService{

    @Autowired
    private ClientImportPlanRepository repository;

    @Autowired
    BackupServerFeignClient backupServerFeignClient;
    
    @Autowired
    private UserFeignClient userFeignClient;

    @Override
    public List<ClientImportPlanDto> listAll() {
        List<ClientImportPlanDto> dtos = null;
        try{
            Iterable<ClientImportPlan> all =  this.repository.findAll();
            if(null != all){
                dtos = new ArrayList<>();
                for(ClientImportPlan entity: all){
                    ClientImportPlanDto dto = entity.toDto();
                    // getSiteName
                    if(entity.getSite()!= null){
                        boolean proceed = false;
                        for(int i=0; i<10;i++){
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                proceed = true;
                                break;
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        if(!proceed)
                            throw new AbstractAirgapException("Can't get site name!");
                    }
                    // get backup server name
                    if(entity.getBackupServer()!= null){
                        boolean proceed = false;
                        for(int i=0; i<10;i++){
                            try {
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        if(!proceed)
                            throw new AbstractAirgapException("Can't get backup server name!");
                    }
                    dtos.add(dto);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }

    @Override
    public boolean deleteAll(List<ClientImportPlanDto> dtos) {
        StringBuilder deletedSwiteched = new StringBuilder("");
        StringBuilder noneDeletedSwitches = new StringBuilder("");
        boolean deleted = false;
        boolean noneDeleted = false;
        try {
            if (!dtos.isEmpty() && dtos != null) {
                for (ClientImportPlanDto dto : dtos) {
                    if(!(dto.getStatus() == 3 || dto.getStatus() == 6)){
                        noneDeletedSwitches.append(dto.getServerName() + ", ");
                        noneDeleted = true;
                    }else {
                        deletedSwiteched.append(dto.getServerName() + ", ");
                        deleted = true;
//                        repository.deleteById(dto.getId());
                    }
                }
            }
            String deletedNames = "";
            String noneDeletedNames = "";

            if (noneDeletedSwitches.length() > 2)
                noneDeletedNames = noneDeletedSwitches.substring(0, noneDeletedSwitches.length() - 2);
            if (deletedSwiteched.length() > 2)
                deletedNames = deletedSwiteched.substring(0, deletedSwiteched.length() - 2);
            if (noneDeleted && deleted) {
                throw new AbstractWarningException("Cannot delete running backup server(s) (" + noneDeletedNames + ") import job!"
                        + "backup server(s) (" + deletedNames + ") import job(s) deleted successfully!");
            }
            if (noneDeleted && !deleted) {
                throw new AbstractAirgapException("Cannot delete running backup server(s) (" + noneDeletedNames + ") import job!");
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public List<ClientImportPlanDto> listAllByActive() {
        List<ClientImportPlanDto> dtos = null;
        try{
            Iterable<ClientImportPlan> all =  this.repository.findAllByActive(1);
            if(null != all){
                dtos = new ArrayList<>();
                for(ClientImportPlan entity: all){
                    ClientImportPlanDto dto = entity.toDto();
                    if(entity.getSite()!= null){
                        boolean proceed = false;
                        for(int i=0; i<10;i++){
                            try {
                                dto.setSiteName(backupServerFeignClient.findSiteById(dto.getSite()).getName());
                                dto.setServerName(backupServerFeignClient.findServerById(dto.getBackupServer()).getName());
                                proceed = true;
                                break;
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        if(!proceed)
                            throw new AbstractAirgapException("Can't get site name!");
                    }
                    dtos.add(dto);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return dtos;
    }


    @Autowired
    ClientsImportFeignClient clientsImportFeignClient;


    @Override
    public void run(ClientImportPlanDto byId) {
//        try {
//            if(byId.getSite()!= null){
//                boolean proceed = false;
//                for(int i=0; i<10;i++){
//                    try {
//                        byId.setSiteName(backupServerFeignClient.findSiteById(byId.getSite()).getName());
//                        proceed = true;
//                        break;
//                    }catch (Exception e){
//                        e.printStackTrace();
//                    }
//                }
//                if(!proceed)
//                    throw new AbstractAirgapException("Can't get site name!");
//            }
//            // get backup server name
//            if(byId.getBackupServer()!= null){
//                boolean proceed = false;
//                for(int i=0; i<10;i++){
//                    try {
//                        byId.setServerName(backupServerFeignClient.findServerById(byId.getBackupServer()).getName());
//                        proceed = true;
//                        break;
//                    }catch (Exception e){
//                        e.printStackTrace();
//                    }
//                }
//                if(!proceed)
//                    throw new AbstractAirgapException("Can't get backup server name!");
//            }
//            if(null != clientsImportFeignClient){
//                clientsImportFeignClient.importMetadata(byId);
//            }
//        }catch (Exception e){
//            e.printStackTrace();
//            throw new AbstractAirgapException(e.getMessage());
//        }
    }

    @Override
    public boolean updatePlanStatus(Integer planId, Integer status) {
        try {
            this.repository.updatePlanStatus(planId,status);
            return true;
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public ClientImportPlanDto findClientPlanByServerId(Integer serverId) {
        ClientImportPlan clientImportPlan = null;
        try {
            Optional<ClientImportPlan> entity = this.repository.findByBackupServer(serverId);
            if(!entity.isEmpty()){
                clientImportPlan = entity.get();
                if(clientImportPlan != null)
                    return clientImportPlan.toDto();
            }

        }catch (Exception e){
            e.printStackTrace();
            throw  new AbstractAirgapException(e.getMessage());
        }
        return null;
    }

    @Override
    public boolean activateOrDeactivate(List<ClientImportPlanDto> dtos, Integer status) {
        try {
            List<String> wfNamesAlreadyActivated = null;
            List<String> wfNamesHasBeenActivated = null;
            List<String> wfNamesAlreadyDeactivated = null;
            List<String> wfNamesHasBeenDeActivated = null;
            List<String> wfNamesAlreadyRunning = null;
            boolean proceed = true;
            if (dtos != null && !dtos.isEmpty()) {
                wfNamesAlreadyActivated = new ArrayList<>();
                wfNamesHasBeenActivated = new ArrayList<>();
                wfNamesAlreadyDeactivated = new ArrayList<>();
                wfNamesHasBeenDeActivated = new ArrayList<>();
                wfNamesAlreadyRunning = new ArrayList<>();
                for (ClientImportPlanDto dto : dtos) {
//                    ClientImportPlan wf = repository.findById(dto.getId()).get();
//                    if (status == 1) {
//                        if (wf.getActive() != null && wf.getActive() == 1) {
//                            wfNamesAlreadyActivated.add(dto.getServerName());
//                        } else {
//                            wfNamesHasBeenActivated.add(dto.getServerName());
//                            repository.activateOrDeactivate(wf.getId(), status);
//                        }
//                    }
//                    else {
//                        if (wf.getStatus().equals(1) || wf.getStatus().equals(7) || dto.getStatus() == 2 || dto.getStatus() == 5 || dto.getStatus() == 8) {
//                            wfNamesAlreadyRunning.add(dto.getServerName());
//                        } else if (wf.getActive() != null && wf.getActive() == 0) {
//                            wfNamesAlreadyDeactivated.add(dto.getServerName());
//                        } else {
//                            wfNamesHasBeenDeActivated.add(dto.getServerName());
//                            repository.activateOrDeactivate(wf.getId(), status);
//                        }
//                    }
                    String nowStatus = "activated";
                    if (status == 0) nowStatus = "deactivated";


//                    try {
//                        /**
//                         * Log user logging as Audit entry
//                         */
//                        auditingService.logAudit(
//                                new AuditLogsDto(new Date(), MicroservicesNamesEnum.AirGap.toString(), "Project Workflow",
//                                        ( "activated".equalsIgnoreCase(nowStatus)?OperationEnum.ACTIVATED.toString():OperationEnum.DEACTIVATED.toString()), httpSession.getAttribute("user_name").toString(), "Workflow (" + wf.getName() + ") is " + nowStatus
//                                ));
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
                }
                /**
                 * End of auditing
                 */

            }


            if (status == 1) {
                if (!wfNamesAlreadyActivated.isEmpty() && wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyActivated + ") plan(s) already activated!");
                } else if (!wfNamesAlreadyActivated.isEmpty() && !wfNamesHasBeenActivated.isEmpty()) {
                    StringBuilder namesAlreadyActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyActivated) {
                        namesAlreadyActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenActivated) {
                        nameshasBeenActivated.append(s + ", ");
                    }
                    namesAlreadyActivated.substring(0, namesAlreadyActivated.length() - 2);
                    nameshasBeenActivated.substring(0, nameshasBeenActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyActivated + ") Plan(s) already activated, Backup Server(s) (" + nameshasBeenActivated + ") Plan(s) activated successfully!");
                }
            } else if (status == 0) {

                if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated!");
                }  else if (!wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractAirgapException("Backup Server(s) (" + namesAlreadyDeActivated + ") plan(s) already deactivated!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                } else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") already deactivated, and backup server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully!, cannot deactivate already running backup server(s) (" + alreadyRunning + ") plan(s)");
                }else if (!wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder namesAlreadyDeActivated = new StringBuilder("");
                    for (String s : wfNamesAlreadyDeactivated) {
                        namesAlreadyDeActivated.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    namesAlreadyDeActivated.substring(0, namesAlreadyDeActivated.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + namesAlreadyDeActivated + ") Plan(s) already deactivated, Backup Server(s) (" + nameshasBeenDeActivated + ") Plan(s) deactivated successfully!");
                }else if (wfNamesAlreadyDeactivated.isEmpty() && wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);

                    throw new AbstractWarningException("Cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                } else if (wfNamesAlreadyDeactivated.isEmpty() && !wfNamesHasBeenDeActivated.isEmpty() && !wfNamesAlreadyRunning.isEmpty()) {
                    StringBuilder alreadyRunning = new StringBuilder("");
                    for (String s : wfNamesAlreadyRunning) {
                        alreadyRunning.append(s + ", ");
                    }
                    StringBuilder nameshasBeenDeActivated = new StringBuilder("");
                    for (String s : wfNamesHasBeenDeActivated) {
                        nameshasBeenDeActivated.append(s + ", ");
                    }
                    alreadyRunning.substring(0, alreadyRunning.length() - 2);
                    nameshasBeenDeActivated.substring(0, nameshasBeenDeActivated.length() - 2);
                    throw new AbstractWarningException("Backup Server(s) (" + nameshasBeenDeActivated + ") plan(s) deactivated successfully, cannot deactivate running backup server(s) (" + alreadyRunning + ") plan(s)!");
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Override
    public boolean deleteByBackupServer(Integer serverId) {
        try {
            Optional<ClientImportPlan> byBackupServer = repository.findByBackupServer(serverId);
            if (!byBackupServer.isEmpty()) {
                ClientImportPlan clientImportPlan = byBackupServer.get();
                if(clientImportPlan!= null){
                    if(clientImportPlan.getStatus().equals(1) || clientImportPlan.getStatus().equals(7)
                    || clientImportPlan.getStatus().equals(2) || clientImportPlan.getStatus().equals(5)
                            || clientImportPlan.getStatus().equals(8)){
                        throw new AbstractAirgapException("Cannot delete the backup server because it's running in an import plan!");
                    }
                    repository.delete(clientImportPlan);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }

    @Override
    public List<ClientImportPlanDto> clientImportPlanByScheduledTaskAndScheduledTaskEnabled(Integer sceduledTaskId) {
        List<ClientImportPlanDto> clientImportPlans = null;
        try {
            List<ClientImportPlan> all = this.repository.findAllByScheduledTask(sceduledTaskId);
            if(null != all && !all.isEmpty()){
                clientImportPlans = new ArrayList<>();
                for(ClientImportPlan clientImportPlan: all){
                    if(clientImportPlan.getScheduleType().equals(2)){ // 2 means after scheduled task
                        clientImportPlans.add(clientImportPlan.toDto());
                    }
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw  new AbstractAirgapException(e.getMessage());
        }
        return clientImportPlans;
    }
    @Override
    public List<ClientImportPlanDto> clientImportPlanByAirgapWorkflow(Integer wfId) {
        List<ClientImportPlanDto> clientImportPlans = null;
        try {
            List<ClientImportPlan> all = this.repository.findAllByWAndAirgapWorkflow(wfId);
            if(null != all && !all.isEmpty()){
                clientImportPlans = new ArrayList<>();
                for(ClientImportPlan clientImportPlan: all){
                    if(   clientImportPlan.getScheduleType().equals(3)
                       && clientImportPlan.getTrained().equals(1)
                       && clientImportPlan.getActive().equals(1)
                       && clientImportPlan.getStatus().equals(3)){ // 3 means after workflow
                        clientImportPlans.add(clientImportPlan.toDto());
                    }
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            throw  new AbstractAirgapException(e.getMessage());
        }
        return clientImportPlans;
    }
    @Override
    public boolean updatePlanTrainStatus(Integer planId, Boolean trained) {
        try {
            if(trained)
                this.repository.updatePlanTrained(planId,1);
            else
                this.repository.updatePlanTrained(planId,0);
            return true;
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Autowired
    private HttpSession httpSession;


    @Override
    public ClientImportPlanDto save(ClientImportPlanDto dto) {
        try {

            ClientImportPlan entity = new ClientImportPlan();
//            if(dto.getId()!= null){
//

                // check if plan is running right now
//                ClientImportPlanDto byId = findById(dto.getId());
//                if(null!= byId){
//                    if(byId.getStatus().equals(1) || byId.getStatus().equals(7) ||
//                            byId.getStatus().equals(2) || byId.getStatus().equals(5)||
//                            byId.getStatus().equals(8)){
//                        throw new AbstractAirgapException("Cannot edit this plan while it's running");
//                    }
//                }
//
//                entity.setId(dto.getId());
//                try{
//                    entity.setModifiedBy(httpSession.getAttribute("user_name").toString());
//                }catch (Exception e){}
//                entity.setCreatedBy(dto.getCreatedBy());
//                entity.setModifiedOn(new Date(Calendar.getInstance().getTimeInMillis()));
//                entity.setCreatedOn(dto.getCreatedOn());
//            }else {
//                try{
//                    entity.setCreatedBy(httpSession.getAttribute("user_name").toString());
//                }catch (Exception e){}
//                entity.setCreatedOn(new Date(Calendar.getInstance().getTimeInMillis()));
//            }
                if(dto.getBackupServer()!= null)
                entity.setBackupServer(dto.getBackupServer());
            if(dto.getCreatedBy()!= null)
                entity.setCreatedBy(dto.getCreatedBy());
            if(dto.getCreatedOn()!= null)
                entity.setCreatedOn(dto.getCreatedOn());
            if(dto.getImportLocation()!= null)
                entity.setImportLocation(dto.getImportLocation());
            if(dto.getPassword()!= null)
                entity.setPassword(Encoding.encode(dto.getPassword()));
            if(dto.getScheduleType()!= null)
                entity.setScheduleType(dto.getScheduleType());
            if(dto.getSite()!= null)
                entity.setSite(dto.getSite());
            if(dto.getStatus()!= null)
                entity.setStatus(dto.getStatus());
            else
                entity.setStatus(3);
            if(dto.getActive()!= null)
                entity.setStatus(dto.getStatus());
            else
                entity.setActive(1);
            if(dto.getUsername()!= null)
                entity.setUsername(dto.getUsername());
            if(dto.getModifiedBy()!= null)
                entity.setModifiedBy(dto.getModifiedBy());
            if(dto.getModifiedOn()!= null)
                entity.setModifiedOn(dto.getModifiedOn());
            if(dto.getSentAt()!= null)
                entity.setSentAt(dto.getSentAt());
            if(dto.getActive()!= null)
                entity.setActive(dto.getActive());
            if(dto.getScheduledTask()!= null)
                entity.setScheduledTask(dto.getScheduledTask());
            if(dto.getRunDay()!= null)
                entity.setRunDay(dto.getRunDay());
            if(dto.getRuntime()!= null)
                entity.setRuntime(dto.getRuntime());
            if(dto.getImportMetadata()!= null){
                if(dto.getImportMetadata())
                    entity.setImportMetadata(1);
                else
                    entity.setImportMetadata(0);
            } else
                entity.setImportMetadata(0);
            if(dto.getTrained()!= null){
                if(dto.getTrained())
                    entity.setTrained(1);
                else
                    entity.setTrained(0);
            }else{
                entity.setTrained(0);
            }
            if(dto.getPort()!= null)
                entity.setPort(dto.getPort());
            return repository.save(entity).toDto();
        }catch (Exception e){
            e.printStackTrace();
            if(e.getMessage().contains("backup_server_UNIQUE")){
                throw new AbstractAirgapException("Backup server is unique per plan!");
            }else if(e.getMessage().contains("[import_location_UNIQUE]"))
                throw new AbstractAirgapException("Path is unique per plan!");
            throw new AbstractAirgapException(e.getMessage());
        }
    }

    @Override
    public boolean delete(int id) {
        try {
            this.repository.deleteById(id);
        }catch (Exception e){
            e.printStackTrace();
            throw new AbstractAirgapException(e.getMessage());
        }
        return true;
    }

    @Override
    public ClientImportPlanDto findById(Integer id) {
        ClientImportPlan clientImportPlan = null;
        try {
            Optional<ClientImportPlan> entity = this.repository.findById(id);
            clientImportPlan = entity.get();
            return clientImportPlan.toDto();
        }catch (Exception e){
            e.printStackTrace();
            throw  new AbstractAirgapException(e.getMessage());
        }
    }
}
